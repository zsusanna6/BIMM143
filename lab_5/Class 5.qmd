---
title: "Class 5: database with ggplot"
author: "Longmei A17012012"
format: gfm
---


> Q1. For which phases is data visualization important in our scientific workflows?

All of the above

> Q2. True or False? The ggplot2 package comes already installed with R?

FALSE

> Q3. Which plot types are typically NOT used to compare distributions of numeric variables?

Network Graphs

> Q4. Which statement about data visualization with ggplot2 is incorrect?

ggplot2 is the only way to create graphs in R


## Plotting in R

R has lots of ways to make plots and figures. This includes so-called **base** graphics and packages like **ggplots**

```{r}
plot(cars)
```
This is a **base** R plot of the in-built `dataset` dataset that has only two columns

```{r}
head(cars)
```
 > Q. how would we plot this data with **ggplot** ?
 
 All ggplot figures have at least 3 layers: 
 
 - **data**
 - **aesthetics** (how the data map to the plot)
 - **geometry** (how we draw the plot)
 
 before using any new packag, need to download and instal it with the `install.packages()` command.
 
 Never use `install.packages()` within my quarto document otherwise it will install the package over and over again. 
 
 Once a package is installed I can load it up with the `library()` function.
```{r}
library(ggplot2)
ggplot(cars) +
  aes(x=speed, y=dist) + 
  geom_point()
```
 
**Key-point**: for simple plot (like the one above), ggplot is more verbose (we need to do more typing) but as plot get more complicated ggplot starts to be more vlear and simple than base E plot()

> Q. Which geometric layer should be used to create scatter plots in ggplot2?

geom_point()

> Q. In your own RStudio can you add a trend line layer to help show the relationship between the plot variables with the geom_smooth() function?

Yes I can add another layer of Geom. 

> Q. Argue with geom_smooth() to add a straight line from a linear model without the shaded standard error region?

Adding the argument `method = "lm"` would change the line to a straight line, and adding the argument `se = FALSE` would remove the shaded standard error region. 

> Q. Can you finish this plot by adding various label annotations with the labs() function and changing the plot look to a more conservative “black & white” theme by adding the theme_bw() function:

Yes, I can add arguments such as `title`, `subtitle`, `caption`, `x`, `y` in the `labs()` function. I can as the `theme_bw()` function to change the theme to black and white. 
 
```{r}
ggplot(cars) +
  aes(speed, dist) + 
  geom_point() +
  geom_smooth(se = FALSE, method = "lm") +
  labs(title = "Stopping distance of old cars", 
       subtitle = "From the in-built cars dataset",
       x ="Speed (MPH)",
       y ="Stopping Distance (ft)",
       caption ="Dataset: 'cars'") +
  theme_bw()

```


## Adding more plot aesthetic 
```{r}
##loading gene information
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```
> Q. Use the nrow() function to find out how many genes are in this dataset. What is your answer?

```{r}
nrow(genes)
```
There are 5196 genes in this dataset, each represented by a row. 

> Use the colnames() function and the ncol() function on the genes data frame to find out what the column names are (we will need these later) and how many columns there are. How many columns did you find?

```{r}
colnames(genes)
ncol(genes)
```
The column names are "Gene", "Conditional", "Condition2", and "State". There are 4 columns in total. 

> Q. Use the table() function on the State column of this data.frame to find out how many ‘up’ regulated genes there are. What is your answer?

```{r}
table(genes$State)
```
There are 127 up regulated genes

> Q. Using your values above and 2 significant figures. What fraction of total genes is up-regulated in this dataset? 

```{r}
round(table(genes$State) / nrow(genes), 2)
```
2% of the genes are up-regulated in this dataset. 

> Q. Complete the code below to produce the following plot

```{r}
ggplot(genes) +
  aes(x=Condition1, y=Condition2) +
  geom_point()
```
```{r}
p <- ggplot(genes) +
  aes(x=Condition1, y=Condition2, col = State) +
  geom_point()
p

p <- p + scale_color_manual(values = c("blue", "grey", "red"))
p
```

> Q. Nice, now add some plot annotations to the p object with the labs() function so your plot looks like the following:

```{r}
p + 
  labs(title = "Gene Expression Treatment Upon Drug Treatment",
      x = "Control (No Drug)",
      y = "Drug Treatment")
```
## Going Further

```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"
gapminder <- read.delim(url)
library(dplyr)

gapminder_2007 <- gapminder %>% filter(year==2007)

head(gapminder_2007)
```

```{r}
table(gapminder$year)
```

> Q. Complete the code below to produce a first basic scater plot of this gapminder_2007 dataset:

```{r}
ggplot(gapminder_2007) +
  aes(x = gdpPercap, y= lifeExp) +
  geom_point(alpha=0.5)
```
```{r}
ggplot(gapminder_2007) +
  aes(x = gdpPercap, y= lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.5)
```
color the points by numerical value population pop:
```{r}
ggplot(gapminder_2007) + 
  aes(x = gdpPercap, y = lifeExp, color = pop) +
  geom_point(alpha=0.9)
```


Adjusting point size: to reflect the actual population differences with the point sizes, we use the `scale_size_area()` function. 

```{r}
ggplot(gapminder_2007) + 
  geom_point(alpha=0.5) + 
  aes(x = gdpPercap, y = lifeExp, size = pop)
  scale_size_area(max_size = 10)
```


-Q. Can you adapt the code you have learned thus far to reproduce our gapminder scatter plot for the year 1957? What do you notice about this plot is it easy to compare with the one for 2007?


```{r}
gapminder_1957 <- gapminder %>% filter(year==1957)
head(gapminder_1957)
```

```{r}
ggplot(gapminder_1957) +
  aes(x = gdpPercap, y=lifeExp, color = continent, size = pop) +
  geom_point(alpha = 0.7) +
    scale_size_area(max_size = 15)
```

It is not that easily comparable with the plot for 2007 since the scale for x and y axis are different, making it hard to directly visualize the differences. 

```{r}

gapminder_comb = gapminder %>% filter(year==1957 | year==2007)
ggplot(gapminder_comb) +
  aes(x = gdpPercap, y=lifeExp, color = continent, size = pop) +
  geom_point(alpha = 0.7) +
    scale_size_area(max_size = 10) +
      facet_wrap(~year)
```

